/*! For license information please see filesize.bc021895763931377b35.cjs.LICENSE.txt */
"use strict";const ARRAY="array",BIT="bit",BITS="bits",BYTE="byte",BYTES="bytes",EMPTY="",EXPONENT="exponent",FUNCTION="function",IEC="iec",INVALID_NUMBER="Invalid number",INVALID_ROUND="Invalid rounding method",JEDEC="jedec",OBJECT="object",PERIOD=".",ROUND="round",S="s",SI_KBIT="kbit",SI_KBYTE="kB",SPACE=" ",STRING="string",ZERO="0",STRINGS={symbol:{iec:{bits:["bit","Kibit","Mibit","Gibit","Tibit","Pibit","Eibit","Zibit","Yibit"],bytes:["B","KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"]},jedec:{bits:["bit","Kbit","Mbit","Gbit","Tbit","Pbit","Ebit","Zbit","Ybit"],bytes:["B","KB","MB","GB","TB","PB","EB","ZB","YB"]}},fullform:{iec:["","kibi","mebi","gibi","tebi","pebi","exbi","zebi","yobi"],jedec:["","kilo","mega","giga","tera","peta","exa","zetta","yotta"]}};function filesize(t,{bits:i=!1,pad:e=!1,base:o=-1,round:r=2,locale:n=EMPTY,localeOptions:l={},separator:s=EMPTY,spacer:a=SPACE,symbols:E={},standard:b=EMPTY,output:T=STRING,fullform:p=!1,fullforms:I=[],exponent:B=-1,roundingMethod:u=ROUND,precision:N=0}={}){let c=B,f=Number(t),d=[],M=0,P=EMPTY;-1===o&&0===b.length?(o=10,b=JEDEC):-1===o&&b.length>0?o=(b=b===IEC?IEC:JEDEC)===IEC?2:10:b=10===(o=2===o?2:10)||b===JEDEC?JEDEC:IEC;const R=10===o?1e3:1024,Y=!0===p,g=f<0,m=Math[u];if("bigint"!==typeof t&&isNaN(t))throw new TypeError(INVALID_NUMBER);if(typeof m!==FUNCTION)throw new TypeError(INVALID_ROUND);if(g&&(f=-f),(-1===c||isNaN(c))&&(c=Math.floor(Math.log(f)/Math.log(R)),c<0&&(c=0)),c>8&&(N>0&&(N+=8-c),c=8),T===EXPONENT)return c;if(0===f)d[0]=0,P=d[1]=STRINGS.symbol[b][i?BITS:BYTES][c];else{M=f/(2===o?Math.pow(2,10*c):Math.pow(1e3,c)),i&&(M*=8,M>=R&&c<8&&(M/=R,c++));const t=Math.pow(10,c>0?r:0);d[0]=m(M*t)/t,d[0]===R&&c<8&&-1===B&&(d[0]=1,c++),P=d[1]=10===o&&1===c?i?SI_KBIT:SI_KBYTE:STRINGS.symbol[b][i?BITS:BYTES][c]}if(g&&(d[0]=-d[0]),N>0&&(d[0]=d[0].toPrecision(N)),d[1]=E[d[1]]||d[1],!0===n?d[0]=d[0].toLocaleString():n.length>0?d[0]=d[0].toLocaleString(n,l):s.length>0&&(d[0]=d[0].toString().replace(PERIOD,s)),e&&!1===Number.isInteger(d[0])&&r>0){const t=s||PERIOD,i=d[0].toString().split(t),e=i[1]||EMPTY,o=e.length,n=r-o;d[0]=`${i[0]}${t}${e.padEnd(o+n,ZERO)}`}return Y&&(d[1]=I[c]?I[c]:STRINGS.fullform[b][c]+(i?BIT:BYTE)+(1===d[0]?EMPTY:S)),T===ARRAY?d:T===OBJECT?{value:d[0],symbol:d[1],exponent:c,unit:P}:d.join(a)}function partial({bits:t=!1,pad:i=!1,base:e=-1,round:o=2,locale:r=EMPTY,localeOptions:n={},separator:l=EMPTY,spacer:s=SPACE,symbols:a={},standard:E=EMPTY,output:b=STRING,fullform:T=!1,fullforms:p=[],exponent:I=-1,roundingMethod:B=ROUND,precision:u=0}={}){return N=>filesize(N,{bits:t,pad:i,base:e,round:o,locale:r,localeOptions:n,separator:l,spacer:s,symbols:a,standard:E,output:b,fullform:T,fullforms:p,exponent:I,roundingMethod:B,precision:u})}exports.filesize=filesize,exports.partial=partial;